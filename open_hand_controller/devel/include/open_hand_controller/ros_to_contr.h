// Generated by gencpp from file open_hand_controller/ros_to_contr.msg
// DO NOT EDIT!


#ifndef OPEN_HAND_CONTROLLER_MESSAGE_ROS_TO_CONTR_H
#define OPEN_HAND_CONTROLLER_MESSAGE_ROS_TO_CONTR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace open_hand_controller
{
template <class ContainerAllocator>
struct ros_to_contr_
{
  typedef ros_to_contr_<ContainerAllocator> Type;

  ros_to_contr_()
    : Finger1Position(0.0)
    , Finger2Position(0.0)
    , Finger3Position(0.0)
    , FingersRotationPosition(0.0)
    , Finger1Torque(0.0)
    , Finger2Torque(0.0)
    , Finger3Torque(0.0)
    , FingersRotationTorque(0.0)
    , Finger1Enable(false)
    , Finger2Enable(false)
    , Finger3Enable(false)
    , FingersRotationEnable(false)  {
    }
  ros_to_contr_(const ContainerAllocator& _alloc)
    : Finger1Position(0.0)
    , Finger2Position(0.0)
    , Finger3Position(0.0)
    , FingersRotationPosition(0.0)
    , Finger1Torque(0.0)
    , Finger2Torque(0.0)
    , Finger3Torque(0.0)
    , FingersRotationTorque(0.0)
    , Finger1Enable(false)
    , Finger2Enable(false)
    , Finger3Enable(false)
    , FingersRotationEnable(false)  {
  (void)_alloc;
    }



   typedef double _Finger1Position_type;
  _Finger1Position_type Finger1Position;

   typedef double _Finger2Position_type;
  _Finger2Position_type Finger2Position;

   typedef double _Finger3Position_type;
  _Finger3Position_type Finger3Position;

   typedef double _FingersRotationPosition_type;
  _FingersRotationPosition_type FingersRotationPosition;

   typedef double _Finger1Torque_type;
  _Finger1Torque_type Finger1Torque;

   typedef double _Finger2Torque_type;
  _Finger2Torque_type Finger2Torque;

   typedef double _Finger3Torque_type;
  _Finger3Torque_type Finger3Torque;

   typedef double _FingersRotationTorque_type;
  _FingersRotationTorque_type FingersRotationTorque;

   typedef uint8_t _Finger1Enable_type;
  _Finger1Enable_type Finger1Enable;

   typedef uint8_t _Finger2Enable_type;
  _Finger2Enable_type Finger2Enable;

   typedef uint8_t _Finger3Enable_type;
  _Finger3Enable_type Finger3Enable;

   typedef uint8_t _FingersRotationEnable_type;
  _FingersRotationEnable_type FingersRotationEnable;




  typedef boost::shared_ptr< ::open_hand_controller::ros_to_contr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::open_hand_controller::ros_to_contr_<ContainerAllocator> const> ConstPtr;

}; // struct ros_to_contr_

typedef ::open_hand_controller::ros_to_contr_<std::allocator<void> > ros_to_contr;

typedef boost::shared_ptr< ::open_hand_controller::ros_to_contr > ros_to_contrPtr;
typedef boost::shared_ptr< ::open_hand_controller::ros_to_contr const> ros_to_contrConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::open_hand_controller::ros_to_contr_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::open_hand_controller::ros_to_contr_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace open_hand_controller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'open_hand_controller': ['/home/lukasz/workspace/src/open_hand_controller/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::open_hand_controller::ros_to_contr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::open_hand_controller::ros_to_contr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::open_hand_controller::ros_to_contr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::open_hand_controller::ros_to_contr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_hand_controller::ros_to_contr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_hand_controller::ros_to_contr_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::open_hand_controller::ros_to_contr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f176e3a616de118050eccf0d024c7b7";
  }

  static const char* value(const ::open_hand_controller::ros_to_contr_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f176e3a616de118ULL;
  static const uint64_t static_value2 = 0x050eccf0d024c7b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::open_hand_controller::ros_to_contr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "open_hand_controller/ros_to_contr";
  }

  static const char* value(const ::open_hand_controller::ros_to_contr_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::open_hand_controller::ros_to_contr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 Finger1Position\n\
float64 Finger2Position\n\
float64 Finger3Position\n\
float64 FingersRotationPosition\n\
\n\
float64 Finger1Torque\n\
float64 Finger2Torque\n\
float64 Finger3Torque\n\
float64 FingersRotationTorque\n\
\n\
bool Finger1Enable\n\
bool Finger2Enable\n\
bool Finger3Enable\n\
bool FingersRotationEnable\n\
";
  }

  static const char* value(const ::open_hand_controller::ros_to_contr_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::open_hand_controller::ros_to_contr_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Finger1Position);
      stream.next(m.Finger2Position);
      stream.next(m.Finger3Position);
      stream.next(m.FingersRotationPosition);
      stream.next(m.Finger1Torque);
      stream.next(m.Finger2Torque);
      stream.next(m.Finger3Torque);
      stream.next(m.FingersRotationTorque);
      stream.next(m.Finger1Enable);
      stream.next(m.Finger2Enable);
      stream.next(m.Finger3Enable);
      stream.next(m.FingersRotationEnable);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ros_to_contr_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::open_hand_controller::ros_to_contr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::open_hand_controller::ros_to_contr_<ContainerAllocator>& v)
  {
    s << indent << "Finger1Position: ";
    Printer<double>::stream(s, indent + "  ", v.Finger1Position);
    s << indent << "Finger2Position: ";
    Printer<double>::stream(s, indent + "  ", v.Finger2Position);
    s << indent << "Finger3Position: ";
    Printer<double>::stream(s, indent + "  ", v.Finger3Position);
    s << indent << "FingersRotationPosition: ";
    Printer<double>::stream(s, indent + "  ", v.FingersRotationPosition);
    s << indent << "Finger1Torque: ";
    Printer<double>::stream(s, indent + "  ", v.Finger1Torque);
    s << indent << "Finger2Torque: ";
    Printer<double>::stream(s, indent + "  ", v.Finger2Torque);
    s << indent << "Finger3Torque: ";
    Printer<double>::stream(s, indent + "  ", v.Finger3Torque);
    s << indent << "FingersRotationTorque: ";
    Printer<double>::stream(s, indent + "  ", v.FingersRotationTorque);
    s << indent << "Finger1Enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Finger1Enable);
    s << indent << "Finger2Enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Finger2Enable);
    s << indent << "Finger3Enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Finger3Enable);
    s << indent << "FingersRotationEnable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.FingersRotationEnable);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPEN_HAND_CONTROLLER_MESSAGE_ROS_TO_CONTR_H
